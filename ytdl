#!/bin/bash

v=$(sed -n '1p' $PREFIX/etc/ytdlversion)


red="\e[31m"
green="\e[32m"
yellow="\e[33m"
orange="\e[34m"
magenta="\e[35m"
cyan="\e[36m"
e="\e[0m"
b="\e[1m"
i="\e[3m"


Update()
{
    bash -c "$(curl -fsSL https://bit.ly/install-ytdl-termux-advanced)"
}


Help()
{
    echo -e "${orange}A simple script written for easy downloading videos from YouTube using yt-dlp${e}"
    echo -e "${orange}version - ${e}${b}${green}v$v${e}  ${i}${cyan}Copyright (c) 2022 Lucky Jain${e}"
    echo
    echo -e "${orange}USAGE:  ytdl [OPTIONS] [LINK] ${e}"
    echo
    echo "ytdl        invokes the function, does not require options or link"
    echo "-u          option to update this program"
    echo "-h          to print this help message"
    echo "-q          quiet mode, will show no progress, download quietly"
    echo "-a link     to download audio"
    echo "-b link     download best video (with in-built audio) available"
    echo "-s link     download audio from youtube using metadata"
    echo "            from any spotify link"
    echo
    echo -e "${yellow}This command separately downloads best video and best audio available and merges them${e}"
    echo -e "${yellow}Use -b option to download video with in-built audio and avoid merging${e}"
    echo -e "${yellow}-s option supports spotify track, playlist, album and artist urls${e}"
    echo -e "${yellow}Options -a, -b, -s require (single)link${e}"
}


Spotcreds()
{
    echo
    echo -e "${magenta}Checking credentials${e}"
    if [[ -v SPOTIPY_CLIENT_ID ]]
    then
        echo -e "${magenta}Credentials found${e}"
        echo
    else
        echo -e "${red}Credentials not found${e}\n\n${yellow}Creating credentials file\nGet your credentials from${e} ${magenta}https://developer.spotify.com/my-applications${e}"
        echo -e "\n${orange}Please enter Spotify Client ID:\n${e}"
        read CLIENT_ID
        echo -e "\n\n\n${orange}Please enter Spotify Client Secret:\n${e}"
        read CLIENT_SECRET
        echo export SPOTIPY_CLIENT_ID=$CLIENT_ID >> $PREFIX/etc/zshrc
        echo export SPOTIPY_CLIENT_SECRET=$CLIENT_SECRET >> $PREFIX/etc/zshrc
        echo
        echo -e "${green}Credentials saved successfully\nPlease restart app to use this feature{e}"
        exit
    fi
}

quiet=""

while getopts ":uUFqhb:a:s:" option; do
    case $option in
        F)
            echo -e "${orange}Forcing Full Update${e}"
            rm $PREFIX/etc/ytdlversion
            Update
            exit;;
        U)
            echo -e "${orange}Forcing Update${e}"
            rm $PREFIX/etc/ytdlversion
            echo Forced update >> $PREFIX/etc/ytdlversion
            Update
            exit;;
        u)
            Update
            exit;;
        h)
            Help
            exit;;
        q)
            quiet="-q";;
        b)
            link=${OPTARG}
            if [[ $link == */playlist?* ]]
            then
                playlist="--yes-playlist"
                output='$EXTERNAL_STORAGE/YTDL/%(playlist_index)s.%(title)s.%(ext)s'
            else
                playlist="--no-playlist"
                output='$EXTERNAL_STORAGE/YTDL/%(title)s.%(ext)s'
            fi
            yt-dlp $quiet -f b --prefer-ffmpeg --output '$EXTERNAL_STORAGE/YTDL/%(title)s.%(ext)s' --no-mtime --no-post-overwrites --geo-bypass --ignore-errors --no-playlist $link
            exit;;
        a)
            link=${OPTARG}
            if [[ $link == */playlist?* ]]
            then
                playlist="--yes-playlist"
                output='$EXTERNAL_STORAGE/YTDL/%(playlist_index)s.%(title)s.%(ext)s'
            else
                playlist="--no-playlist"
                output='$EXTERNAL_STORAGE/YTDL/%(title)s.%(ext)s'
            fi
            yt-dlp $quiet -f bestaudio --extract-audio --audio-format mp3 --audio-quality 320k --embed-thumbnail --add-metadata --prefer-ffmpeg --output '$EXTERNAL_STORAGE/YTDL/%(title)s.%(ext)s' --no-mtime --geo-bypass --ignore-errors --no-playlist $link
            exit;;
        s)
            Spotcreds
            link=${OPTARG}
            spotify_dl -l $link -s -w -k -o $EXTERNAL_STORAGE/YTDL
            exit;;
       \?)
            echo -e "${red}Invalid option!!!${e}\n\n";;
    esac
done


echo
echo -e "${magenta}Do you wish to download Video or Audio?${e}\n\n1. Video\n2. Audio"
echo
read filetype


echo
echo -e "${yellow}Please enter the link below:${e}"
echo
read link


if [[ $filetype -eq 1 ]]
then
    if [[ -f ~/print_vid_data ]]
    then
        rm ~/print_vid_data
        rm ~/vid_formats
        rm ~/print_aud_data
        rm ~/aud_formats
    fi
    echo
    echo -e "${yellow}Getting available resolutions\nPlease wait for a while...${e}"
    echo
    python ~/bin/ytdl.py $link
    bash ~/print_vid_data
    echo
    echo -e "${yellow}Please enter the Sr.N of your desired video format${e}"
    echo
    read video_selection
    bash ~/print_aud_data
    echo
    echo -e "${yellow}Please enter the Sr.N of your desired audio format${e}"
    echo
    read audio_selection
fi

echo
echo -e "${yellow}Working on it\nPlease wait for a while...${e}"
echo
echo


if [[ $filetype -eq 1 ]]
then
    format=$(awk NR==$video_selection ~/vid_formats)+$(awk NR==$audio_selection ~/aud_formats)
else
    format='328/380/338/258/327/256/141/251/bestaudio --extract-audio --audio-format mp3 --audio-quality 320k --embed-thumbnail --add-metadata'
fi


if [[ $link == */playlist?* ]]
then
    playlist="--yes-playlist"
    output='$EXTERNAL_STORAGE/YTDL/%(playlist_index)s.%(title)s - %(format_note)s.%(ext)s'
else
    playlist="--no-playlist"
    output='$EXTERNAL_STORAGE/YTDL/%(title)s - %(format_note)s.%(ext)s'
fi


if [[ $filetype -eq 1 ]]
then
    rm ~/print_vid_data
    rm ~/vid_formats
    rm ~/print_aud_data
    rm ~/aud_formats
fi
yt-dlp $quiet -f $format --prefer-ffmpeg --output "$output" --no-mtime --no-post-overwrites --geo-bypass --ignore-errors $playlist $link

echo
echo
echo -e "${green}Done${e}"
